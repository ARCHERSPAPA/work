import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';
import {RequestService} from '../../service/request.service';
import {WarningService} from '../../service/warning.service';
import {Default} from '../../model/constant';
import {Messages} from '../../model/msg';
import {MakeService} from '../../service/make.service';
import {NgbActiveModal} from '@ng-bootstrap/ng-bootstrap';
import {ConfigService} from '../../service/config.service';
import {UserService} from '../../service/user.service';
import {getVersionType} from '../../model/methods';

@Component({
    selector: 'rev-stencil',
    templateUrl: './stencil.component.html',
    styleUrls: ['./stencil.component.scss']
})
export class StencilComponent implements OnInit {
    //当前选择版本id
    @Input() versionId: number;
    //是否显示列表
    // @Input() visible: boolean = false;
    //当前选择四大类型
    @Input() type: number;
    //报价id
    @Input() offerId: number;
    //基础报价时的小项菜单名称
    @Input() infoName: string;

    //增减项主的id
    @Input() pauseId: number;

    //显示列表的title
    @Input() title: string;

    // @Output() visibleHandler: EventEmitter<any> = new EventEmitter<any>();
    // @Output() successHandler: EventEmitter<any> = new EventEmitter<any>();


    public pageNo: number = Default.PAGE.PAGE_NO;
    public pageSize: number = Default.PAGE.PAGE_SIZE;
    public total: number = Default.PAGE.PAGE_TOTAL;
    public category = '';
    public projectName = '';

    public moduleList: any;
    public categoryList: any;

    private selectModuleIds: Array<any> = [];

    private selectModules: Array<any> = [];

    public loading = false;

    /**
     * 是否已全选过;
     * @type {boolean}
     */
    public selectModulesAll = false;


    private configBase: any;

    constructor(private request: RequestService,
                private warn: WarningService,
                private makes: MakeService,
                public modal: NgbActiveModal,
                private config: ConfigService,
                private user: UserService) {
    }

    ngOnInit() {
        this.changeData();
        this.loadCategory();
    }

    changeData(...args) {
        const that = this;
        if (args && args.length > 0) {
            this.pageNo = Default.PAGE.PAGE_NO;
            this.total = Default.PAGE.PAGE_TOTAL;
            // this.selectModuleIds = [];
        }
        if (that.versionId) {
            that.request.doPost({
                url: 'moduleListQuote',
                data: {
                    versionId: that.versionId,
                    pageNo: that.pageNo,
                    pageSize: that.pageSize,
                    category: that.category,
                    projectName: that.projectName,
                    companyId: that.user.getCompanyId(),
                    versionType: getVersionType(that.type)
                },
                success: (res => {
                    // console.log(res);
                    if (res && res.code == 200) {
                        // that.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                        that.moduleList = res.data.pageSet;
                        that.total = res.data.total;
                        that.makes.addMakings(that.moduleList);
                    } else {
                        that.warn.onError(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        }
    }

    // ngOnChanges() {
        // if (this.versionId) {
        //     this.loadCategory();
        //     this.changeData();
        // }
    // }


    ngDoCheck() {
        if (this.config.getConfigBase() && !this.configBase) {
            this.configBase = this.config.getConfigBase();
        } else {
            this.title = this.title ? this.title : this.getName();
        }
    }

    // searchData() {
    //     this.pageNo = Default.PAGE.PAGE_NO;
    //     this.total = Default.PAGE.PAGE_TOTAL;
    //     this.selectModuleIds = [];
        // this.changeData();
    // }

    loadCategory() {
        const that = this;
        that.request.doPost({
            url: 'categoryList',
            data: {
                versionId: that.versionId
            },
            success: (res => {
                if (res && res.code === 200) {
                    that.categoryList = res.data;
                } else {
                    that.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            })
        });
    }

    selectModule(module) {
        if (this.existModuleId(module.id)) {
            this.selectModuleIds.splice(this.selectModuleIds.indexOf(module.id), 1);
        } else {
            this.selectModuleIds.push(module.id);
        }
    }

    existModuleId(id) {
        const ids = this.selectModuleIds;
        if (ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (ids[i] == id) { return true; }
            }
        }
        return false;
    }

    /**
     * 选择去重
     * @param id
     * @returns {boolean}
     */
    existModuleById(id) {
        const modules = this.selectModules;
        if (modules && modules.length > 0) {
            for (const module of modules) {
                if (module.id == id) { return true; }
            }
        }
    }

    findModuleById(id) {
        const index = 0;
        return index;
    }


    /**
     * 取消
     */
    cancel() {
        this.resetIds();
        this.modal.dismiss({
            type: this.type,
            versionId: this.versionId
        });
    }

    /**
     * 提交数据
     */
    send(e) {
        e.stopPropagation();
        e.preventDefault();
        const that = this, params = {};
        if (that.selectModuleIds.length > 0) {
            params['infoIds'] = that.selectModuleIds;
            if (that.type === 3 || that.type === 2 || that.type === 5) {
                params['type'] = that.type;
            } else {
                params['type'] = 1;
                params['infoBranchName'] = that.infoName ? that.infoName : '';
            }

            if (that.pauseId) {
                that.loading = true;
                params['pauseId'] = that.pauseId;
                that.request.doPost({
                    url: 'addPause',
                    data: params,
                    success: (res => {
                        that.loading = false;
                        if (res && res.code == 200) {
                            that.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                            that.resetIds();
                            that.modal.close(res);
                        } else {
                            that.warn.onError(res.msg || Messages.FAIL.DATA);
                        }
                    })
                });
            } else {
                that.loading = true;
                params['id'] = that.offerId;
                that.request.doPost({
                    url: 'addBasicQuote',
                    data: params,
                    success: (res => {
                        that.loading = false;
                        if (res && res.code == 200) {
                            that.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                            that.resetIds();
                            that.modal.close(JSON.stringify(res.data[0]));
                        } else {
                            that.warn.onError(res.msg || Messages.FAIL.DATA);
                        }
                    })
                });

            }

        } else {
            that.warn.onWarn(Messages.SELECT_NOT_EMPTY);
        }
    }

    /**
     * 提交材料清单数据
     */
    sendTo(e) {
        e.stopPropagation();
        e.preventDefault();
        const that = this;
        if (that.type === 5) {
            const makes = that.makes.getMarkings(), modules = [];
            if (that.selectModuleIds && that.selectModuleIds.length > 0 && makes.length > 0) {
                // let len = ids.length;
                for (let i = 0; i < that.selectModuleIds.length; i++) {
                    for (const make of makes) {
                        if (that.selectModuleIds[i] === make.id) {
                            make['remark'] = '';
                            modules.push(make);
                        }
                    }
                }
            }
            this.modal.close({
                modules: modules,
                versionId: this.versionId,
                category: this.category,
                projectName: this.projectName

            });
        }
    }

    /**
     * 重置数据
     */
    resetIds() {
        this.selectModuleIds = [];
        this.pageNo = Default.PAGE.PAGE_NO;
        this.projectName = '';
        this.category = '';
    }

    /**
     * 全选
     */
    selectModuleAll() {
        const that = this;
        if (that.versionId) {
            that.request.doPost({
                url: 'moduleFoldIds',
                data: {
                    versionId: that.versionId,
                    category: that.category,
                    projectName: that.projectName,
                    companyId: that.user.getCompanyId(),
                    versionType: that.type
                },
                success: (res => {
                    // console.log(res);
                    if (res && res.code == 200) {
                        // that.selectModuleIds = res.data;
                        const params = {
                            versionId: that.versionId,
                            pageNo: that.pageNo,
                            pageSize: res.data.length ? res.data.length : Default.PAGE.PAGE_SIZE,
                            category: that.category,
                            projectName: that.projectName
                        };
                        that.request.doPost({
                            url: 'moduleListQuote',
                            data: params,
                            success: (res => {
                                if (res && res.code == 200) {
                                    if (res.data && res.data.pageSet) {
                                        that.selectModules.push(res.data.pageSet);
                                        that.makes.addMakings(res.data.pageSet);
                                    }
                                } else {
                                    this.warn.onError(res.msg || Messages.FAIL.DATA);
                                }
                            })
                        });
                        // that.makes.loadMaterialByAll(params);
                    } else {
                        that.warn.onError(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        } else {
            this.selectModuleIds = [];
        }
    }

    /**
     * 判定是否全选
     * @returns {boolean}
     */
    // existModuleAll() {
    //     return this.selectModuleIds.length == this.total;
    // }

    getName() {
        let that = this, name = '';
        // console.log(that.configBase);
        if (that.configBase) {
            if (that.configBase && that.configBase.length > 0) {
                for (const tc of that.configBase) {
                    if (that.versionId && !name) {
                        if (tc.versions && tc.versions.length > 0) {
                            for (const option of tc.versions) {
                                if (option.versionId === Number(that.versionId)) {
                                    name = option.name;
                                }
                            }
                        }
                    }
                }
            }
        }
        return name ? name : '版本名称';
    }
}
