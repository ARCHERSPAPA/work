import { Component, OnInit } from '@angular/core';
import { Messages } from '../../../../model/msg';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import * as UserValidate from '../../../../validate/user-validate';

import { WarningService } from '../../../../service/warning.service';
import { Default } from '../../../../model/constant';
import { RequestService } from '../../../../service/request.service';
import { setStyleBg } from 'src/app/model/methods';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { UploaderComponent } from '../../../../plugins/uploader/uploader.component';
@Component({
  selector: 'rev-supplier-material-add',
  templateUrl: './supplier-material-add.component.html',
  styleUrls: ['./supplier-material-add.component.scss']
})
export class SupplierMaterialAddComponent implements OnInit {
  public materialForm;
  public SocialCreditCode: number;
  public phone: number;
  public companyName: string;
  public companyShortName: string;
  public juridicalPerson;
  public juridicalCode;
  public license;
  public serveCode;
  public codeFace;
  public codeBackFace;
  public cooperationAgreement;
  public _albums = [];
  public index = 0;

  constructor(
    private fb: FormBuilder,
    private req: RequestService,
    private warn: WarningService,
    private modalService: NgbModal,
  ) { }

  ngOnInit() {
    this.materialForm = this.fb.group({
      SocialCreditCode: [this.SocialCreditCode, [
        Validators.required,
        Validators.minLength(18),
      ]],
      phone: [this.phone, [
        Validators.required,
        Validators.maxLength(11),
        UserValidate.ValidatePhone
      ]],
      companyName: [this.companyName, [
        Validators.required,
        Validators.maxLength(30),
      ]],
      companyShortName: [this.companyShortName, [
        Validators.required,
        Validators.maxLength(10),
      ]],
      juridicalPerson: [this.juridicalPerson, [
        Validators.required,
        Validators.maxLength(10),
        Validators.minLength(2),
      ]],
      juridicalCode: [this.juridicalCode, [
        Validators.required,
        Validators.minLength(15),
        Validators.maxLength(18),
        UserValidate.ValidateIdCard
      ]],
      serveCode: [this.serveCode, [
        Validators.required,
        Validators.minLength(2),
      ]],
    });
  }
  addVerify(type) {
    let name
    switch (type) {
      case 1: name = '上传身份证正面'
        break;
      case 2: name = '上传身份证背面'
        break;
      case 3: name = '上传营业执照'
        break;
      case 4: name = '上传合作协议'
        break;
      default:
        break;
    }
    console.log(this.materialForm)
    const modalRef = this.modalService.open(UploaderComponent, {
      centered: true,
      keyboard: false
    });
    modalRef.componentInstance.name = name;
    modalRef.componentInstance.width = 10;
    modalRef.componentInstance.height = 10;
    modalRef.result.then((result) => {
      switch (type) {
        case 1: this.codeFace = result.image;
          break;
        case 2: this.codeBackFace = result.image;
          break;
        case 3: this.license = result.image;
          break;
        case 4: this.cooperationAgreement = result.image;
          break;
        default:
          break;
      }
    }, (reason) => {
      console.log(reason);
    });
  }
  check(e,v){
    let param={};
    let url
if (e==1) {
 param['code']=v ;url='codeRepeatVerify'
}
if (e==2) {
  param['supplierNumber']=v; url='shortCodeVerify'
 }
 if (e==3) {
  param['companyPhone']=v;url='companyPhoneVerify'
 }

this.req.doPost({
  url:url,
  data:param,
  success:res=>{
    if (res && res.code == 200) {
      if(res.data.code !=200){
        this.warn.onError(res.msg || Messages.FAIL.DATA);
      }
  } else {
      this.warn.onError(res.msg || Messages.FAIL.DATA);
  }
  }
})
  }
  checkImg() {
    if (this.codeFace && this.codeBackFace && this.license && this.cooperationAgreement && this.materialForm.valid) {
      return false;
    } else {
      return true;
    }
  }
  openLarge(src) {
    this._albums = [];
    this._albums.push({ src: src, thumb: src });
    ;
  }
  handleOk($event) {
this.req.doPost({
  url:'createCompanyMateriail',
  data:{
    companyName:this.companyName,
    abbreviation:this.companyShortName,
    companyPhone:this.phone,
    code:this.SocialCreditCode,
    businessLicense:this.license,
    idCardImgPositive:this.codeFace,
    idCardImgback:this.codeBackFace,
    cooperationAgreement:this.cooperationAgreement,
    legaLperson:this.juridicalPerson,
    idCard:this.juridicalCode,
    supplierNumber:this.serveCode
  },
  success:res=>{
    console.log(res)
    if (res && res.code == 200) {
      this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
      history.back()
  } else {
    this.warn.onError(res.msg || Messages.FAIL.DATA);
  }
  }

})
  }
  delImg(type) {
    console.log(type)
    switch (type) {
      case 1: this.codeFace = ''
        break;
      case 2: this.codeBackFace = ''
        break;
      case 3: this.license = ''
        break;
      case 4: this.cooperationAgreement = ''
        break;
      default:
        break;
    }
  }
  handleCancel() {
    history.back();
  }
  styleImg(img) {
    return setStyleBg(img, 96, 96);
  }
}
