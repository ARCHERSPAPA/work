import { Component, OnInit } from '@angular/core';
import * as UserValidate from '../../../validate/user-validate';
import { WarningService } from '../../../service/warning.service';
import { Messages } from '../../../model/msg';
import { RequestService } from '../../../service/request.service';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { UserService } from '../../../service/user.service';

@Component({
    selector: 'rev-cost-engineer',
    templateUrl: './cost-engineer.component.html',
    styleUrls: ['./../cost.component.scss', './cost-engineer.component.scss'],

})
export class CostEngineerComponent implements OnInit {

    public title: string;
    public switch: string;
    public lock = false;
    //用于页面点击时触发，防止进入页面切换时自动执行
    public pageLock = false;
    public costLock = false;
    public designLock = false;
    public modify = false;
    //图片审核状态
    public imgState: boolean;
    public modifyForm: FormGroup;
    public percentage: number;
    public addRatioType = '1';
    public addPercentage = 0;
    public id: number;
    public symbol = '+';
    public designPrice:number=35;
    public graphConfrim:boolean;
    formatterPercent = (value: number) => `${value} %`;
    parserPercent = (value: string) => value.replace(' %', '');
    constructor(private req: RequestService,
        private warn: WarningService,
        private fb: FormBuilder,
        private user: UserService) {
    }

    ngOnInit() {
        this.title = '报价设置';
        this.switch = 'left';
        this.modifyForm = this.fb.group({
            percentage: [this.percentage, [
                Validators.required,
                UserValidate.ValidateNumDecimalPoint
            ]],
            addPercentage: [this.addPercentage, [
                Validators.required,
                UserValidate.ValidatePrice
            ]],
            designPrice: [this.designPrice, [
                Validators.required,
                
            ]]
        });
        this.loadEngineerRatio();
        this.getDrawState();
    }
    
    configGraphState(e){
        console.log(this.id)
        this.req.doPost({
            url: 'configRatio',
            data: {
                companyId:this.user.getCompanyId(),
                ratio:e?1:0,
                ratioType:2
            },
            success: (res => {
                if (res && res.code == 200) {
                    this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                } else {
                    this.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            })
        });
    }
/**
 *
 * @param e 切换开关审核图纸
 */
    configDrawState(e) {
        this.imgState = e;
        this.req.doPost({
            url: 'drawingConfigSet',
            data: {
                state: this.imgState ? 1 : 0
            },
            success: res => {
                if (res && res.code == 200) {
                    this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                } else {
                    this.imgState = !this.imgState;
                    this.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            }
        });
    }
/**
 *
 *获取图纸的状态
 */
    getDrawState() {
        this.req.doPost({
            url: 'drawingConfigGet',
            success: res => {
                if (res && res.code == 200) {
                    this.imgState = res.data == 1 ? true : false;
                } else {

                    this.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            }
        });
    }
    /**
     * 点击页面时触发开启页面的响应
     */
    setOpen(type: number) {
        if (type === 0) {
            this.pageLock = true;
        } else if(type===1) {
            this.costLock = true;
        } else if(type===3) {
            this.designLock = true;
        }

    }

    submit(type: number) {
        let me;
        if (type === 6) {
            clearTimeout(me);
        } else {
            if (this.percentage) {
                this.percentage = +this.percentage.toFixed(2);
            }
            if (this.addPercentage) {
                this.addPercentage = +this.addPercentage.toFixed(2);
            }
            if (this.pageLock || this.costLock ||this.designLock) {
                if (this.lock) {
                    clearTimeout(me);
                } else {
                    me = setTimeout(() => {
                        if (type === 0) {
                            this.loadRatio(this.percentage, this.id, type);
                        } else if(type===1){
                            this.loadRatio(this.addPercentage, this.id, type);
                        }else if(type===3){
                            this.loadRatio(this.designPrice, this.id, type);
                        }
                        this.lock = false;
                    }, 1000);
                }
                this.lock = true;
            }
        }
    }

    loadEngineerRatio() {
        if (this.user.getCompanyId()) {
            this.req.doPost({
                url: 'detailRatio',
                data: {
                    companyId: this.user.getCompanyId(),
                    ratioType: 0
                },
                success: (res => {
                    if (res && res.code == 200) {
                        if (res.data) {
                            if (res.data.ratio) {
                                this.percentage = res.data.ratio.ratio;
                            } else {
                                this.percentage = 0.08;
                            }
                            if (res.data.picture) {
                                this.graphConfrim = res.data.picture.ratio;
                            } 
                            if (res.data.design) {
                                this.designPrice = res.data.design.ratio;
                            } 
                            if (res.data.pause) {
                                if (Math.sign(res.data.pause.ratio) === -1) {
                                    this.symbol = '-';
                                    this.addRatioType = '2';
                                    this.addPercentage = -res.data.pause.ratio;
                                } else {
                                    this.addPercentage = res.data.pause.ratio;
                                }

                            } else {
                                this.addPercentage = 0;
                            }
                            this.id = res.data.id;
                        } else {
                            this.percentage = 0.08;
                        }
                        // this.percentage = res.data && res.data.ratio?res.data.ratio:0;
                        // this.id = res.data && res.data.id?res.data.id:null;
                    } else {
                        this.modify = false;
                        this.percentage = 0;
                        this.warn.onError(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        }
    }
    addTypechange() {
        if (this.addRatioType === '1') {
            this.symbol = '+';
        } else {
            this.symbol = '-';
        }
    }

    modifySetting() {
        if (this.modifyForm.valid) {
            this.modify = !this.modify;
            if (!this.modify) {
                this.loadRatio(this.modifyForm.value.percentage, this.id);
            }
        } else {
            this.warn.onWarn(Messages.EMPTY);
        }
    }

    loadRatio(...args) {
        let params;
        if (args[0] || args[0] === 0) {
            if (this.symbol === '-' && args[2] == 1) {
                params = {
                    companyId: this.user.getCompanyId(),
                    ratio: -args[0],
                    ratioType: args[2]
                };

            } else if( args[2]==1){
                params = {
                    companyId: this.user.getCompanyId(),
                    ratio: args[0],
                    ratioType: args[2]
                };
            }else if(args[2]==3){
                params = {
                    companyId: this.user.getCompanyId(),
                    ratio: args[0],
                    ratioType: args[2]
                };
            }
            if (args[1]) {
                params['id'] = args[1];
            }

            this.req.doPost({
                url: 'configRatio',
                data: params,
                success: (res => {
                    if (res && res.code == 200) {
                        this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
                    } else {
                        this.percentage = 0;
                        this.warn.onError(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        }

    }
    ngOnDestroy() {
        this.submit(6);
        if (this.pageLock && (this.percentage + '').length < 5) {
            this.loadRatio(this.modifyForm.value.percentage, this.id, 0);
        }
        if (this.costLock) {
            this.loadRatio(this.modifyForm.value.addPercentage, this.id, 1);
        }
        if (this.designLock) {
            this.loadRatio(this.modifyForm.value.designPrice, this.id, 1);
        }
    }


}
