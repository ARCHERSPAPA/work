import { Component, OnInit } from '@angular/core';
import { UploaderMultisComponent } from "../../../../plugins/uploader-multis/uploader-multis.component";
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Lightbox } from 'ngx-lightbox';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { WarningService } from "../../../../service/warning.service";
import { Messages } from "../../../../model/msg";
import { RequestService } from "../../../../service/request.service";
import { Router, ActivatedRoute } from '@angular/router'
import { SettleService } from "../../../../service/settle.service";
@Component({
  selector: 'rev-case-tabs-another',
  templateUrl: './case-tabs-another.component.html',
  styleUrls: ['./case-tabs-another.component.scss']
})
export class CaseTabsAnotherComponent implements OnInit {
  public split = "another"
  public imgList = [];
  public effectPicture: string;
  public realisticPicture: string;
  public isDown:number;
  public anotherForm: FormGroup;
  public quoteNo: any;
  constructor(
    private modalService: NgbModal,
    private req: RequestService,
    private settle: SettleService,
    private warn: WarningService,
    private fb: FormBuilder,
    private _lightbox: Lightbox,
    private route: ActivatedRoute,
  ) {

  }

  ngOnInit() {
    this.route.queryParams.subscribe(params => {
      if (params && params["quoteNo"]) {
        this.quoteNo = atob(params["quoteNo"]);
      }
    })
    this.anotherForm = this.fb.group({
      effectPicture: [this.effectPicture, [
        Validators.required,
      ]],
      realisticPicture: [this.realisticPicture, [
        Validators.required,
      ]],

    })
    this.loadCaseInfo();
  }

  ngDoCheck(){
    if(this.settle.getCaseData()){
      this.isDown=this.settle.getCaseData().isDown;
    }
  }

  addImg() {
    if (this.imgList.length && this.imgList.length > 4) {
      this.warn.onWarn(Messages.ERROR.CASE_IMG_MAX)
    } else {
      const modalRef = this.modalService.open(UploaderMultisComponent, {
        centered: true,
        keyboard: false
      });
      modalRef.componentInstance.name = "新增图片";
      modalRef.componentInstance.open = true;
      modalRef.componentInstance.total=6;
      modalRef.componentInstance.split = this.split;
      // modalRef.componentInstance.cid = this.id ? this.id : Math.ceil(Math.random() * 100);
      modalRef.result.then((result) => {
        result.forEach(item => {
          if (this.imgList.length && this.imgList.length > 4) {
            this.warn.onWarn(Messages.ERROR.CASE_IMG_MAX);
          } else {
            this.imgList.push(item);
          }
        })
      })
    }
  }

  openModal(index) {
    let _albums = []
    this.imgList.forEach((i) => {
      _albums.push({ src: i })

    })
    this._lightbox.open(_albums, index);
  }
  delAnotherDetail(index: number) {
    this.imgList.splice(index, 1)
  }
  //加载数据
  loadCaseInfo() {
    this.req.doPost({
      url: "smallProgramDetails",
      data: { quoteNo: this.quoteNo },
      success: (res => {
        if (res && res.code == 200) {
          this.effectPicture = res.data.vrResultImg;
          this.realisticPicture = res.data.vrLiveImg;
          this.imgList = res.data.newStyleImg ? res.data.newStyleImg : [];
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      })
    });
  }
//提交
  submit() {
    if(this.isDown!=0){
      this.warn.onWarn(Messages.ERROR.EDIT_ERROR);
      return;
    }
    let img = [];
    if (this.imgList && this.imgList.length > 0) {
      this.imgList.forEach(item => {
        img.push(item);
      })
    }

    this.req.doPost({
      url: "smallProgramSave",
      data: {
        quoteNo: this.quoteNo,
        isSave:2,
        styleImg: img,
        vrResultImg: this.effectPicture ? this.effectPicture : '',
        vrLiveImg: this.realisticPicture ? this.realisticPicture : ''
      },
      success: res => {
        if (res && res.code == 200) {
          this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      }
    })
  }
}
