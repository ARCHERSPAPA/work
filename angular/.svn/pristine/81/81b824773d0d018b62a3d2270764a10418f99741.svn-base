import {Component, OnInit} from '@angular/core';
import {setStyleBg, atob} from '../../../../model/methods';
import {RequestService} from '../../../../service/request.service';
import {WarningService} from '../../../../service/warning.service';
import {Messages} from '../../../../model/msg';
import {ActivatedRoute} from '@angular/router';

@Component({
    selector: 'rev-address-detail',
    templateUrl: './address-detail.component.html',
    styleUrls: ['./address-detail.component.scss']
})
export class AddressDetailComponent implements OnInit {

    public title: string;
    //当前成员 id
    public mid: string;
    //引入骨架渲染页面
    public loading = true;
    //个人详情
    public details: any;

    constructor(private req: RequestService,
                private warn: WarningService,
                private activatedRoute: ActivatedRoute) {
    }

    ngOnInit() {
        this.title = '成员详情';

        this.activatedRoute.queryParams.subscribe(params => {
            if (params && params['id']) {
                this.mid = atob(params.id);
                this.loadEmployee(this.mid).then(res => {
                    this.details = res;
                    this.loading = false;
                }).catch(err => {
                    this.loading = false;
                    this.warn.onMsgError(err);
                });
            }
        });

    }


    setStyleBg(src) {
        src = src ? src : 'http://img.zcool.cn/community/01460b57e4a6fa0000012e7ed75e83.png';
        return setStyleBg(src, 120, 120);
    }

    //加载详情
    loadEmployee(id): Promise<any> {
        return new Promise((resolve, reject) => {
            this.req.doPost({
                url: 'loadEmployeeAddressBook',
                data: {id: id},
                success: (res => {
                    if (res && res.code == 200) {
                        resolve(res.data);
                    } else {
                        reject(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        });
    }

    /**
     * 渲染当前职位权限
     * @param data
     * @param {number} type
     * @returns {any}
     */
    renderTree(data: any, type: number) {
        const dps = [];
        if (type === 1) {
            this.getTreeByData(data, dps);
            return dps.reverse().join('/');
        } else if (type === 2) {
            this.getTreeByData(data['seeDep'], dps);
            return dps.reverse().join('/') + `（${data.toPositionIdNames}）`;
        }

    }

    getTreeByData(data: any, arr: any) {
        if (data['baBa'] && data['baBa'].length > 0) {
            arr.push(data.name);
            data['baBa'].forEach(item => {
                this.getTreeByData(item, arr);
            });
        } else {
            arr.push(data.name);
        }
    }




}
