import {Component, OnInit} from '@angular/core';
import {bounceAnimate} from '../../../animation/transform.component';
import {Messages} from '../../../model/msg';
import {RequestService} from '../../../service/request.service';
import {QuoteService} from '../../../service/quote.service';
import {NgbModal} from '@ng-bootstrap/ng-bootstrap';
import {ActivatedRoute} from '@angular/router';
import {WarningService} from '../../../service/warning.service';
import {Default, OFFER_DEFAULT_DATA} from '../../../model/constant';
import {
    btoa,
    changeToDecimal,
    equalToSame,
    showConfirmByState, showLockByState,
    showMakeBtnByState,
    toInteger
} from '../../../model/methods';
import {MakeService} from '../../../service/make.service';
import {UserService} from '../../../service/user.service';
import {FormGroup, FormBuilder, Validators} from '@angular/forms';
import {DragulaService} from 'ng2-dragula';
import {ItemCartComponent} from '../../../plugins/item-cart/item-cart.component';
import {HeaderService} from '../../../service/header.service';
import * as UserValidate from '../../../validate/user-validate';
import {findColorReset, renderColors} from '../../../model/budget-method';

@Component({
    selector: 'rev-makings',
    templateUrl: './makings.component.html',
    styleUrls: ['./../detail.scss', './../price/price.component.scss'],
    animations: [bounceAnimate]
})
export class MakingsComponent implements OnInit {
    public cid: string;

    public baseQuote: any;
    public designers: any;

    //主材(数据)
    // public materials: any;

    //初始化时显示
    public material: any;
    public loading = false;

    public materialName: string = Default.NAME.MATERIALS;

    public remarks: string;

    public state: number = Default.STATE.ITEM_1;

    //材料清单的相关提交信息
    public materialInfo: any;

    public showBtnTextByState = false;

    //备注信息相关
    public markForm: FormGroup;
    public markVisible = false;
    public markItem: any;
    //备注信息
    public markInfo: string;
    // public markInfo: string;
    // public markIndex: number = -1;
    // public markObj: any;

    //添加/修改大项
    public branchForm: FormGroup;
    public branchVisible = false;
    public branchTitle: string;
    public branchInfo: string;
    //是否修改大项信息
    public branchEdit = false;
    //当前大项id
    public branchId: number;

    //实现拖拽
    public drag = false;

    //记数器（id专用）
    public countId = 1000;

    public pageSize: number = Default.PAGE.PAGE_SIZE;
    public pageIndexs: any;
    // 选择模板名 v2.2.5
    public templateName = '选择模板';
    // 选择模板 v2.2.4
    public selectAllTemplate: Array<any> = [];
    // 选中的索引v2.2.4
    public selectIndex = -1;


    constructor(private request: RequestService,
                private quote: QuoteService,
                private header: HeaderService,
                private modalService: NgbModal,
                private activatedRoute: ActivatedRoute,
                private warn: WarningService,
                private makes: MakeService,
                private user: UserService,
                private fb: FormBuilder,
                private dragulaService: DragulaService) {
    }

    ngOnInit() {
        this.state = parseInt(this.activatedRoute.snapshot.paramMap.get('state'));
        this.activatedRoute.queryParams.subscribe((params) => {
            if (params && params['cid']) {
                this.cid = atob(params['cid']);
            }
        });

        if (this.cid) {
            this.quote.loadSubmitInfo(this.cid);
            this.loadMaking(this.cid);
        }

        this.markForm = this.fb.group({
            markInfo: [this.markInfo, [
                Validators.maxLength(500)
            ]]
        });

        this.branchForm = this.fb.group({
            branchInfo: [this.branchInfo, [
                Validators.required,
                Validators.minLength(1),
                Validators.maxLength(30),
                UserValidate.ValidateAccount
            ]]
        });
        //读取模板信息
        this.loadTemplate();

        // this.dragItem("dragInfo");
    }
    // 加载模板
    loadTemplate() {
        this.request.doPost({
            url: 'selectPayTemplate',
            data: {},
            success: (res => {
                if (res && res.code == 200) {
                    console.log(res);
                    this.selectAllTemplate = res.data;
                } else {
                    this.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            })
        });
    }
    /**
     * 拖动
     * @param args
     */
    dragItem(...args) {
        this.dragulaService.drag(args[0]).subscribe(arg => {
            arg.el.className = 'drag-move';
            this.drag = true;
        });

        this.dragulaService.out(args[0]).subscribe(arg => {
            arg.el.className = '';
        });
        this.dragulaService.cancel(args[0]).subscribe(arg => {
            arg.el.className = '';
        });

        this.dragulaService.dropModel(args[0]).subscribe(arg => {
            if (this.drag) {
                this.drag = false;
                // console.log(arg.targetModel);
                // console.log(this.material);
                // this.resetValues(args[1],arg.targetModel);
                this.material.infoMaps[args[1]].infos = arg.targetModel;

            }
        });
    }


    setDefaultMake() {
        let mat;
        const data = OFFER_DEFAULT_DATA.filter(d => {
            return d.type === Default.OFFER_ITEM.ITEM_5;
        });
        if (data && data.length > 0) {
            mat = data[0];
            mat.infoMaps = [];
            mat['expand'] = false;
        }
        return mat;
    }

    /**
     * 初始化加载数据信息
     * @param cid 报价id
     * @param type 类型5：表示材料清单
     */
    loadMaking(cid) {
        if (cid) {
            this.loading = true;
            this.quote.loadData(cid, Default.OFFER_ITEM.ITEM_5)
                .then(res => {
                    this.loading = false;
                    console.log(res);
                    this.material = this.renderMaking(res);
                    this.resetPageIndex();
                }).catch(err => {
                    this.warn.onMsgError(err);
            });
            // this.request.doPost({
            //     url: "bodyQuote",
            //     data: {
            //         id: cid,
            //         type: type
            //     },
            //     success: (res => {
            //
            //     })
            // })
        }
    }

    /**
     * 初始化数据渲染
     * @param data
     * @returns {any}
     */
    renderMaking(data) {
        const that = this;
        if (data && data.length > 0) {
            data.forEach(d => {
                if (d && d.infoMaps && d.infoMaps.length > 0) {
                    d.infoMaps.forEach((map, index) => {
                        map['expand'] = true;
                        map['id'] = this.getRenderId('r');
                        that.dragItem('dragInfo' + index, index);
                        if (map && map.infos && map.infos.length > 0) {
                            map.infos.forEach(info => {
                                info['id'] = info['infoId'];
                            });
                        }
                    });
                }
            });
        }
        return data[0] ? data[0] : this.setDefaultMake();
    }


    ngAfterContentChecked() {
        const that = this;
        that.materialName = Default.NAME.MATERIALS;
        if (that.quote.getSubmitInfo()) {
            this.materialInfo = this.quote.getSubmitInfo();
            that.showBtnTextByState = that.materialInfo.submitedMaterial;
            if (that.showBtnTextByState) {
                that.materialName = that.materialName + '  ' + (that.materialInfo.customConfirmMaterial ? '客户已确认' : '客户尚未确认');
            }
        }

        if (that.header && that.header.getHeaderInfo() && this.header.getHeadBool()) {
            that.header.setHeadBool(false);
            that.baseQuote = that.header.getHeaderInfo()['quoteBase'];
            that.designers = that.header.getHeaderInfo()['designers'];
        }

    }

    /**
     * 添加新的材料清单到列表
     * @param type
     */
    // addUpItem(type) {
    //     let that = this;
    //     const item = that.modalService.open(ItemCartComponent, {
    //         centered: true,
    //         keyboard: true,
    //         backdrop: "static",
    //         size: "lg"
    //     });
    //     item.componentInstance.type = type;
    //     item.componentInstance.id = that.cid;
    //     item.componentInstance.title = "材料清单";
    //
    //     item.result.then((res) => {
    //         if (res) {
    //             if (this.material && this.material.length > 0) {
    //                 this.material = this.material.concat(JSON.parse(res));
    //             } else {
    //                 this.material = JSON.parse(res);
    //             }
    //         }
    //     }, (rea) => {
    //         console.log(rea);
    //     })
    // }

    /**
     * 根据下标删除小项
     * @param index
     */
    // deleteItem(index) {
    //     this.materials = this.materials.filter((m, i) => {
    //         return i !== index;
    //     });
    // }

    /**
     * 复制小项(测试专用)
     * @param data
     */
    // copyTestItem(data: any, index: number) {
    //     this.materials.splice(index, 0, data);
    //     this.materials = this.copy(this.materials);
    // }

    /**
     * 本地复制大小项目
     * @param e
     * @param data 当前项目所有信息
     * @param {number} type 1：细项，2：大项
     * @param args
     */
    copyItem(e: any, data: any, type: number, ...args) {
        e.stopPropagation();
        e.preventDefault();
        if (type === 1) {
            const infos = this.material.infoMaps[args[0]].infos;
            if (infos && infos.length > 0) {
                infos.splice(args[1], 0, data);
            }
            this.material.infoMaps[args[0]].infos = this.material.infoMaps[args[0]].infos.concat();

        } else {
            if (data.name) {
                this.copyBranch(data);
            }
        }

    }

    /**
     * 实现深拷贝
     * @param arr
     * @returns {any[] | {}}
     */
    copy(arr): Array<any> {
        const obj = [];
        for (const i in arr) {
            if (typeof arr[i] === 'object' && arr[i] != undefined) {
                obj[i] = this.copy(arr[i]);
            } else {
                obj[i] = arr[i];
            }
        }
        return obj;
    }


    // copyBranch(bid: number, jt: any) {
    //     if (this.material && this.material.infoMaps.length > 0) {
    //         let info = this.material.infoMaps.filter(map => map.infoBranchId === bid);
    //         this.material.infoMaps.push({
    //             infoBranchId: jt.infoBranchId,
    //             name: jt.name,
    //             infos: info[0].infos
    //         })
    //     }
    //     this.material = this.copy(this.material);
    // }

    /**
     * 复制当前的项目
     * @param cd 当前项目信息
     */
    copyBranch(cd: any) {
        if (this.material && this.material.infoMaps && this.material.infoMaps.length > 0) {
            const infos = this.material.infoMaps.filter(map => map.id === cd.id);
            const index = this.material.infoMaps.findIndex(map => map.id === cd.id);
            const copyInfos = {id: this.getRenderId('c'), name: cd.name, infos: infos[0].infos};
            if (index === this.material.infoMaps.length - 1) {
                this.material.infoMaps.push(copyInfos);
            } else {
                this.material.infoMaps.splice(index + 1, 0, copyInfos);
            }
        }
        this.material = this.copy(this.material);
    }

    /**
     * 实现formula and num变换
     * @param e
     * @param data 当前变量
     */
    changeValue(e: any, data: any) {
        data.num = e.num;
        data.formula = e.formula;
    }

    /**
     * 选择颜色
     * @param {string} color
     * @param data
     */
    selectColorChange(color: string, data: any) {
        data.colours =  findColorReset(color, data.colours);
    }

    /**
     * 分页时变化
     * @param index 当前页码
     * @param i 大项的具体数值（具体那个大项信息）
     */
    pageIndexChange(index, i) {
        // console.log(index);
        this.pageIndexs[i] = index;
    }

    /**
     * 删除细项
     * @param {number} i
     * @param {number} t
     */
    delItem(i: number, t: number) {
        this.material.infoMaps[i].infos.splice(t, 1);
        this.material.infoMaps[i].infos = this.material.infoMaps[i].infos.concat();
        // console.log(this.material.infoMaps[i].infos.length);
        //
        // console.log(this.material);
        // console.log(this.pageIndexs);
    }

    /**
     * 重置各大项的分页码
     */
    resetPageIndex() {
        if (this.material && this.material.infoMaps && this.material.infoMaps.length > 0) {
            this.pageIndexs = [];
            this.material.infoMaps.forEach((info, i) => {
                 this.pageIndexs.push(1);
            });
        }
    }

    /**
     * 备注信息
     * @param data
     */
    remarkItem(data: any) {
        this.markVisible = true;
        this.markItem = data;
        this.markInfo = data.remark;
    }

    markOk() {
        if (this.markForm.valid) {
            this.markItem.remark = this.markInfo;
            this.markCancel();
        }
    }

    markCancel() {
        this.markForm.reset();
        this.markVisible = false;
    }

    /**
     * 保存材料清单
     * @param e
     */
    saveMaterial(e: any) {
        e.stopPropagation();
        e.preventDefault();
        const map = this.getParamsByList(this.material);
        if (this.cid) {
            this.request.doPost({
                url: 'submitMaterial',
                data: {
                    quoteId: this.cid,
                    pkgs: map
                },
                success: (res => {
                    if (res && res.code == 200) {
                        this.warn.onMsgSuccess(res.msg || Messages.SUCCESS.DATA);
                        this.quote.loadSubmitInfo(this.cid);
                    } else {
                        this.warn.onMsgError(res.msg || Messages.FAIL.DATA);
                    }
                })
            });
        }

    }

    /**
     * 判断material是否有数据
     */
    justMaterial(material: any) {
        let bool = false;
        if (material && material.infoMaps && material.infoMaps.length > 0) {
            material.infoMaps.forEach(map => {
                if (map && map.infos && map.infos.length > 0) {
                    bool = true;
                    return;
                }
            });
        }
        return bool;
    }

    /**
     * 整理提交数据
     * @param material
     * @returns {any[]}
     */
    getParamsByList(material) {
        const mp = [];
        if (material && material.infoMaps.length > 0) {
            material.infoMaps.forEach(map => {
                if (map && map.infos && map.infos.length > 0) {
                    const ts = [];
                    map.infos.map(info => {
                        ts.push({
                            id: info.id,
                            num: info.num,
                            remark: info.remark ? info.remark : '',
                            colours: info.colours ? info.colours : '',
                            formula: info.formula ? info.formula : ''
                        });
                    });
                    mp.push({name: map.name, materials: ts});
                } else {
                    mp.push({name: map.name, materials: []});
                }
            });
        }
        return mp;
    }

    //显示每栏的提示按钮
    showBtnByState() {
        return showMakeBtnByState(this.baseQuote) && showLockByState(this.baseQuote) && equalToSame(this.user.getPhone(), this.designers) && this.state !== Default.STATE.ITEM_6 && this.baseQuote.retreat === 0;
    }

    /**
     * v2.1.8版本处理保存材料清单
     * @param materials
     * @returns {any[]}
     */
    // doMaterial(event) {
    //     event.stopPropagation();
    //     if (this.cid) {
    //         this.request.doPost({
    //             url: "submitMaterial",
    //             data: {
    //                 id: this.cid,
    //                 materials: this.unitMaterials(this.materials),
    //             },
    //             success: (res => {
    //                 if (res && res.code == 200) {
    //                     this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
    //                     this.quote.loadSubmitInfo(this.cid);
    //                 } else {
    //                     this.warn.onError(res.msg || Messages.FAIL.DATA);
    //                 }
    //             })
    //         })
    //     }
    // }

    /**
     * v2.1.8组装清单数据
     * @param materials
     * @returns {any[]}
     */
    // unitMaterials(materials) {
    //     let mas = [];
    //     if (materials && materials.length > 0) {
    //         for (let m of materials) {
    //             let ma = {
    //                 id: m.id,
    //                 num: m.num,
    //                 remark: m.remark
    //             };
    //             mas.push(ma);
    //         }
    //     }
    //     return mas;
    // }

    /**
     * 重构项目渲染字段名称
     * @param infos
     * @returns {any}
     */
    changeMaterialById(infos) {
        if (infos && infos.length > 0) {
            for (const info  of infos) {
                info['projectName'] = info['name'];
                info['modelNum'] = info['model'];
                info['id'] = info['infoId'];
            }
        }
        return infos;
    }

    /**
     * 联动保存
     * @returns {boolean}
     */
    // materialListener() {
    //     if (this.materials && this.materials.length) {
    //         for (let m of this.materials) {
    //             if (!Reg.NUM_INT_AND_DECIMAL.test(m["num"])) return true;
    //         }
    //         return false;
    //     }
    // }

    /**
     * 添加备注信息
     * @param item
     */
    // markItem(item) {
    //     this.markInfo = item["remark"] ? item["remark"] : "";
    //     this.markVisible = true;
    //     this.markObj = item;
    // }
    //
    // markOk() {
    //     this.markObj["remark"] = this.markInfo;
    //     this.markCancel();
    // }
    //
    // markCancel() {
    //     this.markVisible = false;
    //     this.markIndex = null;
    //     this.markInfo = "";
    // }
    // afterClose() {
    //     return false;
    // }
    sinTable: any;

     /*
     * 选择模板
     */
    selectTemplate(id, idx) {
        this.selectIndex = idx;
        const template = this.selectAllTemplate.filter(item => {
            return item.id == id;
        });
        this.templateName = template[0].name;
        // this.material = this.renderMaking(template[0].details);
    }

    /**
     * 显示添加大项
     * @param data
     */
    addBranchItem(e: any) {
        e.stopPropagation();
        e.preventDefault();
        // console.log(e);
        this.branchVisible = true;
        this.branchTitle = '添加大项名称';
        this.branchInfo = null;
    }

    /**
     * 修改类型项目中名称 取消
     */
    modifyBranchItem(e: any, data: any) {
        e.stopPropagation();
        e.preventDefault();
        this.branchVisible = true;
        this.branchTitle = '修改大项名称';
        this.branchEdit = true;
        this.branchInfo = data.name;
        this.branchId = data.id;
    }

    /**
     * 添加大项 确定
     */
    branchOk() {
        const that = this;
        if (that.branchForm.valid) {
            const id = that.getRenderId('s');
            this.material['infoMaps'].push({
                name: that.branchInfo,
                id: id
            });
            that.resetPageIndex();
            that.bubbleModalByBranch(id);
            // that.request.doPost({
            //     url: "addQuoteBranchItem",
            //     data: {
            //         quoteId: that.cid,
            //         infoBranchName: that.branchForm.value.branchInfo,
            //         type: Default.OFFER_ITEM.ITEM_5
            //     },
            //     success: (res => {
            //         if (res && res.code == 200) {
            //             that.branchInfo = res.data.infoBranchName;
            //             that.branchId = res.data.infoBranchId;
            //             that.material["infoMaps"].push({
            //                 name: that.branchInfo,
            //                 infoBranchId: that.branchId
            //             });
            //             that.bubbleModalByBranch(that.branchId);
            //         } else {
            //             that.warn.onMsgError(res.msg || Messages.FAIL.DATA);
            //         }
            //     })
            // });
        }
    }

    /**
     * 修改大项信息
     */
    modifyBranchOk() {
        const that = this;
        if (that.branchEdit && that.branchId) {
            const branch = this.material.infoMaps.filter(map => map.id === that.branchId);
            if (branch && branch.length === 1) {
                branch[0].name = that.branchInfo;
            }
            that.branchCancel();
        } else {
            that.warn.onMsgWarn(Messages.PARAM_EMPTY);
        }
    }

    /**
     * 回调选择细项
     * @param {number} bid
     */
    bubbleModalByBranch(bid: string) {
        const that = this;
        const branch = that.modalService.open(ItemCartComponent, {
            centered: true,
            keyboard: true,
            backdrop: 'static',
            size: 'lg'
        });
        branch.componentInstance.type = Default.OFFER_ITEM.ITEM_5;
        branch.componentInstance.id = that.cid;
        branch.componentInstance.infoName = that.branchInfo;
        // branch.componentInstance.infoId = that.branchId;
        branch.componentInstance.title = Default.NAME.MATERIALS;
        that.branchCancel();
        branch.result.then((res) => {
                if (res && res.length > 0) {
                    this.addMaterialInfos(bid, res);
                }
            },
            (rea) => {
                console.log(rea);
            });
    }

    /**
     * 删除大项
     * @param {number} index 位置
     */
    delModifyBranch(index: number) {
        this.material.infoMaps.splice(index, 1);
    }

    /**
     * 添加细项到对应的大项中去
     * @param {number} bid
     * @param {Array<any>} infos
     */
    addMaterialInfos(bid: string, infos: any) {
        if (this.material.infoMaps && this.material.infoMaps.length > 0) {
            const infoMap = this.material.infoMaps.filter(map => map.id === bid);
            if (infoMap && infoMap.length === 1) {
                infoMap[0]['expand'] = true;
                const infoArray = JSON.parse(infos);
                if (infoArray && infoArray.length > 0) {
                    infoArray.forEach(info => {
                        info['model'] = info['modelNum'];
                    });
                }

                if (infoMap[0]['infos'] && infoMap[0]['infos'].length > 0) {
                    infoMap[0]['infos'] = infoMap[0]['infos'].concat(infoArray);
                } else {
                    infoMap[0]['infos'] = infoArray;
                }
            }
        }
    }

    /**
     * 添加大项 取消
     */
    branchCancel() {
        this.branchVisible = false;
        this.branchInfo = null;
        this.branchEdit = false;
        this.branchId = null;
        this.branchTitle = '';
        this.branchForm.reset();
    }

    /**
     * 总计部分(分支计算)
     * @param source
     * @param type
     * @returns {number}
     */
    getTotal(source, type) {
        let total = 0;
        if (source && source.length > 0) {
            for (const s of source) {
                total += this.converseToDecimal(s[type] ? s[type] : 0, s['num'] ? s['num'] : 0);
            }
        }
        return total;
    }

    /**
     * 计算（主干计算）
     * @param source
     * @param type
     * @returns {number}
     */
    getMainColumn(source, type) {
        let total = 0;
        if (source && source.length > 0) {
            for (const so of source) {
                if (so && so['infos'] && so['infos'].length > 0) {
                    for (const s of so['infos']) {
                        total += this.changeToInt(s[type] ? s[type] : 0, 2) * this.changeToInt(s['num'] ? s['num'] : 0, 2);
                    }
                }
            }
        }
        return (Number(total) / Math.pow(10, 4));
    }

    /**
     * 转换成小数
     * @param unit
     * @param num
     * @returns {any}
     */
    converseToDecimal(unit, num) {
        const result = this.changeToInt(unit, 2) * this.changeToInt(num, 2) / Math.pow(10, 4);
        return changeToDecimal(result);
    }

    /**
     * 将小数转化成正数
     * @param num
     * @param curve
     * @returns {number | any}
     */
    changeToInt(num, curve) {
        return toInteger(num, curve);
    }

    /**
     * 重置当前颜色组
     * @param {string} colours
     * @returns {Array<string>}
     */
    renderColors(colours: string): Array<string> {
        return renderColors(colours);
    }

    /**
     * 区别生成还是复制 id
     * @param {string} diff s：新建，r：已存在结果，c：复制
     * @returns {number}
     */
    getRenderId(diff: string) {
        this.countId += 2;
        return diff + this.countId;
    }

    /**
     * 加密url
     * @param {string} id
     * @returns {any}
     */
    btoa(id: string) {
        return btoa(id);
    }

    ngOnDestroy() {
        //防止重复使用备注信息
        this.material = null;
        this.quote.setSubmitInfo(null);
    }
}
