import { Component, OnInit, ElementRef } from '@angular/core';
import { RequestService } from '../../../service/request.service';
import { WarningService } from '../../../service/warning.service';
import { Default } from '../../../model/constant';
import { Messages } from '../../../model/msg';
import { getTypeName,getStatsTypeName } from '../../../model/methods';
import G2 from '@antv/g2/build/g2';
import { DataSet } from '@antv/data-set/build/data-set';
import * as FileSaver from 'file-saver';
import * as XLSX from 'xlsx';
import * as differenceInCalendarDays from 'date-fns/difference_in_calendar_days';
import { btoa } from '../../../model/methods';
import { Router, ActivatedRoute } from '@angular/router';

@Component({
	selector: 'rev-stats-sketch',
	templateUrl: './stats-sketch.component.html',
	styleUrls: ['./stats-sketch.component.scss']
})
export class StatsSketchComponent implements OnInit {

	public data: Array<any> = [];  //图表数组
	public chart: any; //渲染图表
	public startTime: any; //日期选择器的开始时间
	public endTime: any; //日期选择器的结束时间
	public timeFlag = false; //是否打开日期选择器
	public dateRange: Array<any>; //绑定日期开始及结束时间
	public toBeDistributeCount: number; //待派单
	public toBeStartedCount: number; //待开工
	public constructionCount: number; //施工中
	public acceptanceCheck: number; //待验收
	public pageNo: number = Default.PAGE.PAGE_NO; //表格默认从第几页开始
	public pageSize: number = Default.PAGE.PAGE_SIZE; //表格一页的条数
	public total: number = Default.PAGE.PAGE_TOTAL; //表格总条数
	public tableList: Array<any>; //动态明细表格数据
	public today: Date = new Date();
	public isSpinning: boolean; // 柱状图loading提示
	public isTableSpinning: boolean; // 动态明细loading提示
	public isTopLoading: boolean; // top排名loading提示
	public tabs = ['TOP排名','动态明细'] // tab栏
	public tabIndex = 0;
	public topData:Array<any>; // top排名表格数据
	public sortMap = {
		name:"activeCount",
		value:-1
	};
	public sortName = 'activeCount';
	public sortNum = -1;
	public joinCountSort = null;
	public dynamicCountSort = null;
	public activeCountSort = null;
	constructor(private request: RequestService,
		private warn: WarningService,
		private el: ElementRef,
		private router: Router,
		private activatedRoute: ActivatedRoute
	) { }

	ngOnInit() {
		this.initTime();
		this.rectData();
		this.activatedRoute.queryParams.subscribe((params) => {
            if (params) {
                if (params['page']) {
                    this.pageNo = params['page'] > 0 ? params['page'] : Default.PAGE.PAGE_NO;
                }
                if (params['sortName']) {
                  	this.sortName = params['sortName'] ? params['sortName']:'activeCount';
                }
                if (params['sortNum']) {
					this.sortNum = params['sortNum'] ? params['sortNum'] : -1;
				}
				if(this.sortName == 'joinCount'){
					if(this.sortNum == -1){
						this.joinCountSort = 'descend'
						this.dynamicCountSort = 'null'
						this.activeCountSort = 'null'
					}else{
						this.joinCountSort = 'ascend'
						this.dynamicCountSort = 'null'
						this.activeCountSort = 'null'
					}
				}else if(this.sortName == 'dynamicCount'){
					if(this.sortNum == -1){
						this.joinCountSort = 'null'
						this.dynamicCountSort = 'descend'
						this.activeCountSort = 'null'
					}else{
						this.joinCountSort = 'null'
						this.dynamicCountSort = 'ascend'
						this.activeCountSort = 'null'
					}
				}else{
					if(this.sortNum == -1){
						this.joinCountSort = 'null'						
						this.dynamicCountSort = 'null'
						this.activeCountSort = 'descend'
						
					}else{
						this.joinCountSort = 'null'						
						this.dynamicCountSort = 'null'
						this.activeCountSort = 'ascend'	
					}
				}
                this.changeTopData(false,this.sortName,this.sortNum);
            }

        });
	}
	// 初始化时间
	initTime(){
		const now: any = new Date(new Date(new Date().toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1);
		this.endTime = new Date(now - 24 * 60 * 60 * 1000).getTime();
		const endTime = new Date(now - 24 * 60 * 60 * 1000);
		const date2 = new Date(endTime);
		date2.setDate(endTime.getDate() - 6);
		this.startTime = new Date(new Date(date2).toLocaleDateString()).getTime();
		const startTime = new Date(new Date(date2).toLocaleDateString());
		this.dateRange = [startTime, endTime];
	}
	//初始渲染数据
	rectData() {
		this.isSpinning = true;
		const that = this;
		const params = {
			startTime: this.startTime,
			endTime: this.endTime
		};
		that.request.doPost({
			url: 'statisticalConstructionSite',
			data: params,
			success: res => {
				this.isSpinning = false;
				if (res && res.code == 200) {
					this.toBeDistributeCount = res.data.toBeDistributeCount;
					this.toBeStartedCount = res.data.toBeStartedCount;
					this.constructionCount = res.data.constructionCount;
					this.acceptanceCheck = res.data.acceptanceCheck;
					const keyMap = {
						'dynamicCount': '动态总数',
						'joinCount': '负责工地数',
						'activeCount': '去重动态数',
					};
					// 改变key值
					for (let i = 0; i < res.data.supervisorStatistics.length; i++) {
						const obj = res.data.supervisorStatistics[i];
						for (const key in obj) {
							const newKey = keyMap[key];
							if (newKey) {
								obj[newKey] = obj[key];
								delete obj[key];
							}
						}
					}
					res.data.supervisorStatistics.sort(this.sortNumber);
					this.data = res.data.supervisorStatistics;
					this.chartData();
					this.clearView();
				} else {
					that.warn.onError(res.msg || Messages.FAIL.DATA);
				}
			}
		});
	}
	// 按照工地动态数由高到低排序
	sortNumber(a, b) {
		return b['去重动态数'] - a['去重动态数'];
	}
	chartData() {
		const ds = new DataSet({
			state: {
				start: this.startTime,
				end: this.endTime
			}
		});
		const dv = ds.createView('origin').source(this.data);
		dv.transform({
			type: 'fold',
			fields: ['动态总数', '负责工地数', '去重动态数'],
			key: 'key',
			value: 'value',
			retains: ['name']
		});
		this.chart = new G2.Chart({
			container: 'container',
			forceFit: true,
			padding: [20, 20, 120, 100],
			animate: false
		});
		// 坐标轴设置
		this.chart.axis('name', {
			label: {
				autoRotate: false, // 是否需要自动旋转，默认为 true
				textStyle: {
					fill: '#404040', // 文本的颜色
					fontSize: '12', // 文本大小
					fontWeight: '400', // 文本粗细
				}
			},
		});
		// x轴名字太长用...
		function formatter(value: any) {
			/* if (value.length <= 3) {
			  	return value;
			}
			return value.substring(0, 3) + '...'; */
			return value;
		}
		if (dv.rows.length > 30 && dv.rows) {
			this.chart.source(dv.rows, {
				name: {
					formatter,
					values: dv.rows.slice(0, 30).map(row => row['name']),
					range: [0.05, 0.95]
				}
			});
			this.chart.interval()
				.position('name*value')
				.color('key', ['#1890FF', '#40A9FF', '#91D5FF'])
				.size('key', [20, 20, 20])
				.adjust([{
					type: 'dodge',
					// 1 / 32
					marginRatio: 2 / 32
				}]);
		} else {
			this.chart.source(dv.rows, {
				name: {
					formatter
				},
			});
			this.chart.interval()
				.position('name*value')
				.color('key', ['#1890FF', '#40A9FF', '#91D5FF'])
				.adjust([{
					type: 'dodge',
					marginRatio: 1 / 32
				}]);
		}
		this.chart.on('mousemove', ev => {
			this.chart.tooltip({
				showMarkers: false, // 不展示 tooltip markers
			});
		});
		// 图例形状及不允许点击
		this.chart.legend({
			marker: 'square',
			clickable: false
		});
		this.chart.render();
		if (dv.rows.length > 30 && dv.rows) {
			this.chart.interact('drag', {
				type: 'X'
			}).interact('scroll-bar', {
				type: 'X'
			});
		} else {
			return;
		}
	}

	//清除重复的图形
	clearView() {
		// canvas重复渲染 删除第一个子节点
		const lineDraw = this.el.nativeElement.querySelector('#container');
		if (lineDraw.children.length > 1) {
			lineDraw.removeChild(lineDraw.firstChild);
		} else {
			return;
		}
	}
	// 日期选择器日期选中形成柱状图及表格数据
	onChange(result: Date): void {
		this.timeFlag = false;
		this.startTime = new Date(new Date(result[0]).toLocaleDateString()).getTime();
		this.endTime = new Date(new Date(new Date(result[1]).toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1).getTime();
		this.rectData();
		if(this.tabIndex === 0){
			// this.changeTopData(true,"activeCount",-1);
			this.router.navigate(['./'], {
				queryParams: {
					page: 1,
					sortName: "activeCount",
					sortNum: -1
				}, relativeTo: this.activatedRoute
			});
		}else{
			this.changeData(true);
		}
	}
	//打开日期选择框
	open(ev) {
		ev.stopPropagation();
		this.timeFlag = true;
	}
	//关闭日期选择框
	close() {
		this.timeFlag = false;
	}
	//日期选择不能选今天之后的
	disabledDate = (current: Date): boolean => {
		return differenceInCalendarDays(current, this.today) > 0;
	}
	changeTab(e){
		this.tabIndex = e.index
		if(e.index === 0){
			// this.changeTopData(true,"activeCount",-1);
			this.router.navigate(['./'], {
				queryParams: {
					page: 1,
					sortName: "activeCount",
					sortNum: -1
				}, relativeTo: this.activatedRoute
			});
		}else{
			this.changeData(true);
		}
	}
	sort(sort: { key: string, value: any }){
		if(sort.value == 'ascend'){
			sort.value = 1
		}else if(sort.value == 'descend'){
			sort.value = -1
		}else{
			sort.key = "activeCount";
			sort.value = -1
		}
		this.sortMap.name = sort.key;
		this.sortMap.value = sort.value;
		this.router.navigate(['./'], {
            queryParams: {
                page: this.pageNo,
                sortName: sort.key,
                sortNum: sort.value
            }, relativeTo: this.activatedRoute
        });
		// this.changeTopData(false,sort.key,sort.value);
	}

	// top排名翻页
	changePage(){
		this.router.navigate(['./'], {
            queryParams: {
				page: this.pageNo,
                sortName: this.sortMap.name,
                sortNum: this.sortMap.value
            }, relativeTo: this.activatedRoute
        });
	}
	
	// top排名表格
	changeTopData(...args){
		const that = this;
		that.isTopLoading = true;
		if (args[0]) {
            that.pageNo = Default.PAGE.PAGE_NO;
		}
		const params = {
			startTime: that.startTime,
			endTime: that.endTime,
			sortByName:args[1],
			sortNum:args[2],
			page: that.pageNo,
			pageSize: that.pageSize
		};
		that.request.doPost({
			url: 'statisticalConstructionSiteTop',
			data: params,
			success: res => {
				that.isTopLoading = false;
				if (res && res.code == 200) {
					this.topData = res.data.collect1
					that.total = res.data.toal;
				} else {
					that.warn.onError(res.msg || Messages.FAIL.DATA);
				}
			}
		});
		
	}

	//动态明细表格
	changeData(...args) {
		const that = this;
		if (args && args.length > 0) {
            that.pageNo = Default.PAGE.PAGE_NO;
        }
		that.isTableSpinning = true;	
		const params = {
			startTime: that.startTime,
			endTime: that.endTime,
			pageNo: that.pageNo,
			pageSize: that.pageSize
		};
		that.request.doPost({
			url: 'statisticalConstructionSiteInfo',
			data: params,
			success: res => {
				that.isTableSpinning = false;
				if (res && res.code == 200) {
					res.data.pageSet.forEach(item => {
						item.customerHouseArea = item.customerHouseArea ? parseFloat(item.customerHouseArea).toFixed(2) : '';
						item.customerName = item.customerName ? item.customerName.slice(0, 1) + '*' : '';
						item.type = item.type ? getTypeName(item.type) : '';
					});
					that.tableList = res.data.pageSet;
					that.total = res.data.pageCount;
				} else {
					that.warn.onError(res.msg || Messages.FAIL.DATA);
				}
			}
		});
	}

	//下载excel
	exportToExcel() {
		const that = this;
		const params = {
			startTime: this.startTime,
			endTime: this.endTime,
		};
		that.request.doPost({
			url: 'statisticalConstructionSiteInfoDw',
			data: params,
			success: res => {
				if (res && res.code == 200) {
					const excelData = res.data;
					console.log(excelData);
					excelData.reverse();
					excelData.forEach(item => {
						item.type = getStatsTypeName(item.type);
						const date = new Date(item.createDate);
						const seperator1 = '-';
						const year = date.getFullYear();
						let month: any = date.getMonth() + 1;
						let strDate: any = date.getDate();
						if (month >= 1 && month <= 9) {
							month = '0' + month;
						}
						if (strDate >= 0 && strDate <= 9) {
							strDate = '0' + strDate;
						}
						let hour: any = date.getHours();
						if (hour.toString().length !== 2) {
							hour = '0' + hour;
						}
						let minute: any = date.getMinutes();
						if (minute.toString().length !== 2) {
							minute = '0' + minute;
						}
						let second: any = date.getSeconds();
						if (second.toString().length !== 2) {
							second = '0' + second;
						}
						item.createDate = year + seperator1 + month + seperator1 + strDate + '\xa0' + hour + ':' + minute + ':' + second;
						item.customerHouseArea = item.customerHouseArea ? parseFloat(item.customerHouseArea).toFixed(2) : '';
						item.customerHouseAddress = item.customerHouseAddress + item.customerRoomNumber;
						item.customerName = item.customerName ? item.customerName.slice(0, 1) + '*' : '';
						delete item.customerRoomNumber;

					});
					const keyMap = {
						'createDate': '发布时间',
						'supervisorName': '监理',
						'wokerName': '工长',
						'customerName': '客户',
						'customerHouseAddress': '楼盘房号',
						'customerHouseType': '户型',
						'customerHouseArea': '面积',
						'type': '装修类型',
						'stageName': '进度',
					};
					// 改变key值
					for (let i = 0; i < excelData.length; i++) {
						const obj = excelData[i];
						for (const key in obj) {
							const newKey = keyMap[key];
							if (newKey) {
								obj[newKey] = obj[key];
								delete obj[key];
							}
						}
					}
					const json = excelData;
					const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);
					const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
					const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
					this.saveAsExcelFile(excelBuffer, '工地概况');
				} else {
					that.warn.onError(res.msg || Messages.FAIL.DATA);
				}
			}
		});
	}
	saveAsExcelFile(buffer: any, fileName: string) {
		const data: Blob = new Blob([buffer], {
			type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'
		});
		// 下载Excel的名字
		FileSaver.saveAs(data, fileName + '.xlsx');
	}
	btoa(id: string) {
        return btoa(id);
    }
}
