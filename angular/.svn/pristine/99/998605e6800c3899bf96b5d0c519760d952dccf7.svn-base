import { Component, OnInit } from '@angular/core';
import { RequestService } from '../../../service/request.service';
import { WarningService } from '../../../service/warning.service';
import { UserService } from '../../../service/user.service';
import { Messages } from '../../../model/msg';
import { Router, ActivatedRoute } from '@angular/router';
import { atob } from '../../../model/methods';
declare var AMap: any;
@Component({
  selector: 'rev-stats-attendance',
  templateUrl: './stats-attendance.component.html',
  styleUrls: ['./stats-attendance.component.scss']
})

export class StatsAttendanceComponent implements OnInit {

  //日历
  public currentDate = new Date();
  public Date = new Date();
  public DateInfo;
  public supervisor = [];
  public selectSupervisor;
  public calendarSpinning: boolean = false;
  public attendTimeRange: any = {
    startTime: 1577808000000,
    endTime: Date.now()
  };


  public lock = true;


  //头部
  public empId;
  public companyId;
  public headInfo = { avatar: '', name: '', positionName: '' };

  //地图
  public map;
  public mapList;
  public markers = [];
  public defaultPosition: Array<any> = [104.065756, 30.659868];
  public nextPath;
  public polyline;
  public text = [];
  public path;

  //表单
  public statList;

  public dataList;
  constructor(
    private req: RequestService,
    private warn: WarningService,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private user: UserService,
  ) { }



  ngOnInit() {
    this.getSerchList();
    const that = this;
    // this.path.forEach(v => {
    //   v['k'] = 0;
    // })
    this.activatedRoute.queryParams.subscribe((params) => {
      if (params && params.pid) {
        this.empId = atob(params.pid);
        this.selectSupervisor = Number(this.empId);
      }
    })
    that.map = new AMap.Map('container', {
      resizeEnale: true,
      zoom: 10,
      center: that.defaultPosition
    });
    that.map.plugin(['AMap.ToolBar'], function () {
      const tool = new AMap.ToolBar({
        position: 'RB',
        offset: new AMap.Pixel(10, 100),
        autoPosition: false,
      });
      tool.hideDirection();
      that.map.addControl(tool);
    });

    this.map.setFitView();//自适应

  }
  ngDoCheck() {
    // console.log(this.path)
    if (this.user.getCompanyName() && this.lock && this.empId) {
      this.companyId = this.user.getCompanyId();
      // this.empId = this.user.getEmployeeId();
      this.getDateInfo(new Date());
      this.getMapList(new Date());
      this.getTableList(Date.now());
      this.lock = false;
    }
    // console.log(new Date(this.currentDate).getMonth())
  }

  //地图
  renderLine(path) {
    let width = 24;
    var canvasDir = document.createElement('canvas')
    var context = canvasDir.getContext('2d');
    canvasDir.width = width;
    canvasDir.height = width;
    context.strokeStyle = 'white';
    context.lineJoin = 'round';
    context.lineWidth = 8;
    context.moveTo(-4, width - 4);
    context.lineTo(width / 2, 6);
    context.lineTo(width + 4, width - 4);
    context.stroke();
    this.polyline = new AMap.Polyline({
      path: path,
      borderWeight: 3, // 线条宽度，默认为 1
      strokeColor: '#1890FF', // 线条颜色
      lineJoin: 'round', // 折线拐点连接处样式,
      showDir: true,
      dirImg: canvasDir,
      strokeWeight: 10
    });
    this.map.add(this.polyline);
  }

  getTextTemp(i, address, distance, dynamic, time) {

    return `<div class="marker"style='${this.getTextConStyle(dynamic)}'>
  <div style='${this.getOrderConStyle(dynamic)} '>
  ${dynamic ? i+1 : ''}
  </div>
  <div style='${this.getInfoConStyle(dynamic)}'>
  <p  style='${this.showStyle(dynamic)}'> ${address}
  <p style='${this.getTextShowStyle(dynamic)}'> <span>${new Date(time).getHours()}:${new Date(time).getMinutes()}</span>  /  ${this.fixedNum(distance)}
  </div>
  </div>
  <div style='${this.getDtStyle(dynamic)}'></div>
  `
      ;
  }

  renderMark() {

    var that = this;
    let click = false;
    let mar = [];
    let curArr = []
    let offset;
    if (!this.mapList.list) {
      this.mapList.list = [];
    }
    if (!this.mapList.quote) {
      this.mapList.quote = [];
    }
    curArr = this.mapList.quote.concat(this.mapList.list);
    curArr.forEach((v, i) => {
      let name;
      if (i > 0 && this.nextPath.latitude == v.latitude && this.nextPath.longitude == v.longitude) {
        offset = new AMap.Pixel(-30 + i * 12, -30 + i * 12)
      } else {
        offset = new AMap.Pixel(0, 0)
      }
      this.nextPath = v;
      console.log(i)
      click = v['k'] ? true : false;
      name = new AMap.Marker({
        position: [v.longitude, v.latitude],
        content: this.getTextTemp(i, v.customerHouseAddress, v.distance, v.dynamic, v.dynamicTime),
        offset: offset,
        topWhenClick: click,
        zIndex: click ? (1000 + i + 1) : 100 + i
      });
      mar.push(name)
      this.markers = mar;

      AMap.event.addListener(name, 'click', function (e) {
        curArr.forEach(i => {
          that.setMarkers();
          if (i.longitude == v.longitude && i.latitude == v.latitude) {
            i['k'] = 1
          } else {
            i['k'] = 0;
          }
        })
      });
    })
    this.map.add(this.markers);
  }

  fixedNum(num) {
    if (num) {
      if (num > 100) {
        return (num / 1000).toFixed(1) + 'km'
      } else {
        return num.toFixed(0) + 'm'
      }
    } else {
      return '--'
    }
  }

  setMarkers() {
    if (this.polyline) {
      this.map.remove(this.polyline)
    }
    if (this.text) {
      this.map.remove(this.text)
    }
    if(this.path){
      this.renderLine(this.path)
    }
    console.log(this.markers)
    this.map.remove(this.markers)
    this.markers = []
    this.renderMark();
    this.map.setFitView();
    this.checkText();
   
  }

  renderText(pre, i, Distance) {
    let text;
    let preN = new AMap.LngLat(pre[0], pre[1]);
    let preI = new AMap.LngLat(i[0], i[1]);
    text = new AMap.Text({
      text: this.fixedNum(Distance),
      style: {
        'background-color': 'white',
        'border': '1px solid rgba(24,144,255,1)',
        'padding': '8px',
        'font-size': '14px',
        'line-height': '22px',
        'color': '#1890FF'
      }

    });
    text.setPosition(preN.divideBy(2).add(preI.divideBy(2)))
    text.setMap(this.map);
    this.text.push(text);
  }

  getMapList(date) {
    this.req.doPost({
      url: 'statAttendanceMap',
      data: {
        date: Date.parse(this.currentDate + ''),
        empId: this.empId,
        companyId: this.companyId
      },
      success: res => {
        if (res && res.code == 200) {
          this.path=[]
          let path = []
          this.mapList = res.data;
          this.checkText();
          if (this.mapList && this.mapList.quote && this.mapList.quote.length > 0) {
            this.mapList.quote.forEach(map => {
              if (map.dynamic) {
                path.push(new AMap.LngLat(map.longitude, map.latitude))
              }
            });
          }
          this.setMarkers();
          this.path=path;
          if (this.mapList && this.mapList.quote) {
            this.renderLine(this.path);
          }
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      }
    })
  }
  checkMap() {

  }
  checkText() {
    if (this.mapList && this.mapList.coordinate && this.mapList.coordinate.length > 0) {
      this.mapList.coordinate.forEach(map => {
        this.renderText(map.startCoordinate, map.endCoordinate, map.distance)
      });
    }
  }
  //区别有无动态时的样式
  showStyle(dy) {
    console.log(dy)
    if (!dy) {
      return `width: 100%;\
      text-align: center;`
    }

  }
  getTextShowStyle(dy) {
    return `display:${dy ? 'block' : 'none'}`
  }

  getTextConStyle(dy) {
    return `width:${dy ? '192px' : '123px'}; \
  height:${dy ? '59px' : '36px'};\
  background:rgba(24,144,255,1);\
  box-shadow:0px 2px 4px rgba(0,0,0,0.32);\
  border-radius:60px;\
  display:flex;\
  align-items:${dy ? 'inherit' : 'center'};
  transform: ${dy ? 'translate(-50%,-50%)' : 'none'};
  text-align: ${dy ? 'inherit' : 'center'};

`
  }
  getOrderConStyle(dy) {
    return `width:36px;\
  height:36px;\
  background:rgba(255,255,255,1);\
  border-radius:18px;\
  text-align: center;\
  line-height:36px;\
  margin:12px 16px 0 8px;\
  color:#1890FF;\
  font-size:20px;\

  display:${dy ? 'block' : 'none'}
  `}

  getDtStyle(dy) {
    return `position:absolute;left: ${dy ? '-8px' : '48px'};
    top: ${dy ? '29px' : '36px'};z-index:9;
      width:0;height:0;border-right:10px solid transparent;
      border-left: 10px solid transparent;
      border-top:10px solid rgba(24,144,255,1)`;
  }

  getInfoConStyle(dy) {
    if (!dy) {
      return 'color:white;\
      width: 100%;\
      line-height: 50px;'
    } else {
      return 'color:white'
    }

  }



  //表单
  getTableList(date) {
    this.req.doPost({
      url: 'statAttendanceTable',
      data: {
        employeeId: this.empId,
        date: Date.parse(this.currentDate + '')
      },
      success: res => {
        if (res && res.code == 200) {
          // this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
          this.dataList = res.data;
          if (!this.dataList.monthly) {
            this.dataList.monthly = [];
          }
          if (!this.dataList.daily) {
            this.dataList.daily = [];
          }
          if (res.data && res.data.employee) {
            this.headInfo['positionName'] = res.data.employee.positionName ? res.data.employee.positionName : '--';
            this.headInfo['name'] = res.data.employee.name ? res.data.employee.name : '--';
            this.headInfo['avatar'] = res.data.employee.headImg ? res.data.employee.headImg : 'https://qiniu.madrock.com.cn/rev/imgs/435467b6-6b9e-2a36-a51b-bde1d77a31ce.png';
          } else {
            this.headInfo['positionName'] = '--';
            this.headInfo['name'] = '--';
            this.headInfo['avatar'] = 'https://qiniu.madrock.com.cn/rev/imgs/435467b6-6b9e-2a36-a51b-bde1d77a31ce.png';
          }
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      }
    })
  }


  //日历
  getSerchList() {
    this.req.doPost({
      url: 'statAttendanceEmp',
      success: (res => {
        if (res && res.code == 200) {
          if (res.data && res.data.length > 0) {
            res.data.forEach(Supervisor => {
              this.supervisor.push({ name: Supervisor.name, id: Supervisor.id })
            });
          }
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      })
    });
  }
  //选择人员
  selectsupervisor(e) {
    this.empId = e;
    this.getDateInfo(this.currentDate);
    this.getMapList(this.currentDate);
    this.getTableList(this.currentDate);
    this.currentDate = new Date();
    this.Date = new Date();
  }

  changeDate(state) {
    this.getTableList(this.currentDate);
    this.getDateInfo(this.currentDate)
    this.getMapList(this.currentDate)
  }
  //时间变化
  modalChange(e) {
    if (Date.parse(e) <= this.attendTimeRange.endTime && this.attendTimeRange.startTime <= Date.parse(e)) {
      this.currentDate = e;
    } else {
      this.currentDate = new Date();
      this.Date = new Date();
    }
    this.changeDate(true)
  }
  getDateInfo(date) {
    this.req.doPost({
      url: 'statAttendanceDate',
      data: {
        date: Date.parse(date),
        empId: this.empId,
        companyId: this.companyId
      },
      success: res => {
        if (res && res.code == 200) {
          // this.warn.onSuccess(res.msg || Messages.SUCCESS.DATA);
          this.DateInfo = res.data;
        } else {
          this.warn.onError(res.msg || Messages.FAIL.DATA);
        }
      }
    })
  }

  /**
   * @param e 判断是否展示数据
   */
  showDate(e: Date) {
    if (this.DateInfo && this.DateInfo.length > 0) {
      return this.justShowByDay(e, this.DateInfo);
    }
  }

  //判断是否展示禁用状态
  showMouse(e) {
    if (Date.parse(e) <= this.attendTimeRange.endTime && this.attendTimeRange.startTime <= Date.parse(e)) {
      return false;
    } else {
      return true;
    }
  }
  //判断年、月、日
  justShowByDay(ct, st) {
    let a = []
    a = st.filter(v => {
      const c = new Date(ct),
        s = new Date(v.date)
      var cy, sy, cm, sm, cd, sd;

      cy = Number(c.getFullYear());
      sy = Number(s.getFullYear());


      cm = Number(c.getMonth());
      sm = Number(s.getMonth());


      cd = Number(c.getDate());
      sd = Number(s.getDate());
      return sy == cy && sm == cm && sd == cd
    })


    // console.log(a)
    return a.length > 0 ? true : false;
  }
  //获取表格编号
  getconut(date) {
    // console.log(date)
    let a
    if (this.DateInfo && this.DateInfo.length > 0) {
      a = this.DateInfo.filter(v => {
        let newDate = new Date(v.date)
        return newDate.getDate() == date.getDate()
      });
      return a && a.length == 1 ? a[0].num : 0;
    }
  }
  //获取表格距离
  getDistance(date) {
    let a
    a = this.DateInfo.filter(v => {
      let newDate = new Date(v.date)
      return newDate.getDate() == date.getDate()
    });
    return a && a.length == 1 ? this.fixedNum(a[0].distance) : '0米';
  }

}

