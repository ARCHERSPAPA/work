import { Component, OnInit } from '@angular/core';
import {NgbModal} from '@ng-bootstrap/ng-bootstrap';
import {ItemBasicComponent} from "../../../../plugins/item-basic/item-basic.component";
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import * as UserValidate from '../../../../validate/user-validate';

@Component({
  selector: 'rev-cost-detail-account',
  templateUrl: './cost-detail-account.component.html',
  styleUrls: ['./cost-detail-account.component.scss']
})
export class CostDetailAccountComponent implements OnInit {

    //渲染数据时
    public listOfData:any;
    //设计费数据
    public designData:any;

    //存储数据
    public storeData:any;

    public pageSize: number = 5;

    public infoNames = ["套餐", "主材", "个性化项目", "设计费","增减项目"];
    public infoBranceNames = ["主卧", "客卧", "卫生间", "餐厅","其它"];


    public sumTotal:number = 0;

    nameFilterFn = (list: string[], item: any) =>{

    }


    filterName = [
        {text: '套餐', value: '套餐'},
        {text: '主材', value: '主材'},
        {text: '个性化项目', value: '个性化项目'},
        {text: '设计费', value: '设计费'},
        {text: '增减项目', value: '增减项目'},
    ];

    config = {
        row: 4,
        col: 2,
        item: 100
    }

    //创建或者修改大类（大项）
    public modify:boolean = false;
    public isVisible:boolean = false;
    //类名
    public branchInfo:string;
    public branchForm:FormGroup;

    constructor(private modalService:NgbModal,
                private fb:FormBuilder) { }

    ngOnInit(): void {
        let infos;
        if(!sessionStorage.getItem("infos")){
            infos = this.createInfo(this.config.row);
            sessionStorage.setItem("infos",JSON.stringify(infos));
        }else{
            infos = JSON.parse(sessionStorage.getItem("infos"));
        }

        // this.listOfData = infos;
        // console.log(infos);

        this.storeData = this.computedData(infos);
        this.listOfData = this.storeData;
        this.designData = [
            {
                name:"设计费场面",
                price:99.82,
                area: 98.12,
                actualPrice: 102584.25,
                finalPrice: 89200.10,
                costPrice: 990123.25,
                ratio: 30
            }
        ];

        this.branchForm = this.fb.group({
            branchInfo:[this.branchInfo,[
                Validators.required,
                Validators.minLength(1),
                Validators.maxLength(30),
                UserValidate.ValidateAccount
            ]]
        })

    }

    filterChange(e){
        if(e){
            this.listOfData = this.storeData.filter(s => s.name === e);
        }else{
            this.listOfData = this.storeData;
        }

        console.log(this.listOfData);
    }


    computedData(data){
        if(data && data.length > 0){
            for(let i = 0; i < data.length; i++){
                let itemNum = 0,start = 0,end = 0;
                for(let j = 0; j < data[i].infoMaps.length; j++){
                    start = (data[i].infoMaps[j].pageNo - 1) * this.pageSize;
                    end = (data[i].infoMaps[j].pageNo) * this.pageSize;
                    itemNum += data[i].infoMaps[j].infos.slice(start,end).length + 2;
                    data[i].infoMaps[j]["cols"] = data[i].infoMaps[j].infos.length > 0?data[i].infoMaps[j].infos.slice(start,end).length:1;
                }
                data[i]["rows"] = itemNum + 2;
            }
        }
        return data;
    }


    computedTotal(branch:any,type:string){
        switch(type){
            case "material":
                return this.getTotalByType(branch,"materialNum","materialPrice");
            case "carpentry":
                return this.getTotalByType(branch,"carpentryNum","carpentryPrice");
            case "tiler":
                return this.getTotalByType(branch,"tilerNum","tilerPrice");
            case "painting":
                return this.getTotalByType(branch,"paintingNum","paintingPrice");
            case "plumber":
                return this.getTotalByType(branch,"plumberNum","plumberPrice");
        }
    }

    //计算总金额
    computedSumTotal(){

    }

    getTotalByType(infos,num,price){
        let total = 0;
        if(infos && infos.length > 0){
            total = infos.reduce((total,info) =>{
                return total + (info[""+num+""] * info[""+price+""]);
            },0)
        }
        return total;
    }


    /**
     * 生成类型
     * @param num
     * @returns {any[]}
     */
    createInfo(num){
        let data = [];
        for(let i = 0; i < num; i++){
            data.push({
                type: (i+1),
                name: this.infoNames[this.randNum(0,this.infoNames.length - 1)],
                infoMaps: this.createBranch(this.config.col)
            });
        }
        return data;
    }

    /**
     * 创建大项
     * @param num
     */
    createBranch(num){
        let data = [];
        for(let i = 0; i < num; i++){
            data.push({
                name: this.infoBranceNames[this.randNum(0,this.infoBranceNames.length -1)],
                branchId: (i+1),
                infos: this.renderItem(this.randNum(this.config.item/2,this.config.item)),
                pageNo: 1
            })
        }
        return data;
    }

    /**
     * 生成细项
     * @param num
     * @returns {any[]}
     */
    renderItem(num){
        let data = [];
        for(let i = 0; i < num; i++){
            data.push(this.createItem())
        }
        return data;
    }

    /**
     * 生成细项
     * @param {number} i
     * @returns object
     */
    createItem(){
        return {
            brand: "罗马",
            id: 167177,
            infoBranchId: 24038,
            infoBranchName: this.infoBranceNames[this.randNum(0, 2)],
            infoId: 2865,
            infoName: this.infoNames[this.randNum(0, 2)],
            infoType: 1,
            material: null,
            model: null,
            name: "抛釉磁砖不管理顶替阿斯蒂芬模压 模压 李斐莉雪顶替模压 阿斯蒂芬",
            num: this.randNum(0, 1000),
            offerExplain: "主要用于客厅",
            quoteId: 6285,
            remark: null,
            specifications: "500x500",
            totalPrice: 0,
            unit: "匹",
            univalent: "180",
            materialPrice: this.randNum(1, 1000),
            materialNum: this.randNum(1, 20),
            carpentryPrice: this.randNum(100, 500),
            carpentryNum: this.randNum(100, 240),
            tilerPrice: this.randNum(1000, 8000),
            tilerNum: this.randNum(30, 120),
            paintingPrice: this.randNum(1, 1000),
            paintingNum: this.randNum(1, 50),
            plumberPrice: this.randNum(1000, 5000),
            plumberNum: this.randNum(20, 50),
            orderNumber: 'IT-'+new Date().getTime()+"-T-"+this.randNum(1,100)
        }
    }

    /**
     * 生成随机函数
     * @param {number} min
     * @param {number} max
     * @returns {any}
     */
    randNum(min = 0, max = 10){
        return Math.floor(Math.random()*(max-min)+min);
    }

    openBranch(data:any = null){
        this.modify = data?true:false;
        if(this.modify){
            this.branchInfo = data;
        }

    }


    /***
     * 添加大项
     * @param data
     */
    addBranch(data:any){
        console.log(data);
        if(data.infoMaps && data.infoMaps.length > 0){
            data.infoMaps.unshift({
                name: this.infoBranceNames[this.randNum(0,this.infoBranceNames.length -1)],
                branchId: data.infoMaps.length + 1,
                infos: [],
                pageNo: data.pageNo?data.pageNo:1
            })
        }else{
            data.infoMaps = [{
                name: this.infoBranceNames[this.randNum(0,this.infoBranceNames.length -1)],
                branchId: 1,
                infos: [],
                pageNo: data.pageNo?data.pageNo:1
            }]
        }
        this.computedData(this.listOfData);
    }

    /**
     * 添加细项
     * @param branch
     */
    addItem(branch){
        branch.infos.unshift(this.createItem());
        this.computedData(this.listOfData);
    }

    /**
     * 删除细项
     * @param branch
     * @param {number} index
     */
    removeItem(branch,index:number){
        branch.infos.splice(index,1);
        this.computedData(this.listOfData);
    }


    pageChange(e:any,branch:any){
        branch["pageNo"] = e;
        this.computedData(this.listOfData);
    }

    /**
     * 计算显示的所有细项
     * @param branch
     * @returns {any}
     */
    computedBranchInfos(branch){
        return branch.infos.slice((branch.pageNo - 1) * this.pageSize, branch.pageNo*this.pageSize);
    }


    /**
     * 合并前面不同类别的总数
     * @param index
     * @returns {number}
     */
    getInfoMapsLen(index){
        let total = 0;
        if(index > 0 && this.listOfData && this.listOfData.length > 0){
            let data = this.listOfData.filter((d,i) => i < index);
            if(data && data.length > 0){
                for(let i = 0; i < data.length; i++){
                    for(let j = 0; j < data[i].infoMaps.length; j++){
                        total += data[i].infoMaps[j].infos.length;
                    }
                }
            }
        }
        return total;
    }

    /**
     * 确定删除大项
     * @param branch
     */
    confirmDeleteBranch(branch:any,it,ib){
      this.listOfData[it]
    }

    /**
     * 确定删除细项
     * @param item
     */
    confirmDeleteItem(item:any){
      console.log(item);
    }

    cancel(){
      console.log("统一处理二次弹出框")
    }



    openItem(type:number = 1){
        const modal =  this.modalService.open(ItemBasicComponent,
            {
                centered: true,
                keyboard: true,
                size:"lg"
            })

    }


}
