import { Component, OnInit } from '@angular/core';
import {Default} from '../../../../model/constant';
import { RequestService } from '../../../../service/request.service';
import {WarningService} from '../../../../service/warning.service';
import {Messages} from '../../../../model/msg';
import {FormBuilder, FormGroup,Validators} from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import {atob} from '../../../../model/methods';

@Component({
  selector: 'rev-temp-basic-edit',
  templateUrl: './temp-basic-edit.component.html',
  styleUrls: ['./temp-basic-edit.component.scss']
})
export class TempBasicEditComponent implements OnInit {
    public detailState:number; // 基装版本state 1代表已上架
    public versionId: string; //基装版本详情id
    // 版本名称 备注 说明
    public versionName: string; //版本名称
    public remark: string;
    public note: string;

    //搜索
    public categoryList: any;
    public category: string;
    public projectName: string;
    
    public radioSwitch = [
		{
			key: 1,
			text: '已添加'
		},
		{
			key: 2,
			text: '未添加'
		}
    ];  
    public addNum = 0; // 已添加总数
	public state = 1; // 1已添加 2未添加

   
	// 修改title
	public editForm: FormGroup;
	public editVisible = false;
	public editName = '';
    public editRemark = '';
    public editNote = '';

    public checkedNumber :Array<any> = [] //选中的数据

	public pageNo = Default.PAGE.PAGE_NO;
    public pageSize = Default.PAGE.PAGE_SIZE;
    public total = Default.PAGE.PAGE_TOTAL;
    
    public materialList:Array<any> = []; // 表格数据
    public isAllDisplayDataChecked: boolean;
    public indeterminate = false;
    

    constructor(
		private request: RequestService,
        private warn: WarningService,
        private fb: FormBuilder,
        private activatedRoute: ActivatedRoute,
	) { }

    ngOnInit() {
        this.activatedRoute.queryParams.subscribe(params => {
            if (params && params['id']) {
                this.versionId = atob(params.id);
				this.detailState = params.detailState;
                this.changeData();
            }
		});
		
		this.editForm = this.fb.group({
            editName: ['', [
                Validators.required,
                Validators.maxLength(30)
            ]],
            editRemark: ['', [
                Validators.maxLength(300)
            ]],
            editNote: ['', [
                Validators.maxLength(300)
            ]]
        });
        this.getCategory();
	}
	
	/**
     *title的修改信息
     */
    showModal(name, ...args) {
        this.editVisible = true;
        this.editName = name;
        if (args && args.length > 0) {
            this.editRemark = args[0];
            this.editNote = args[1];
        }
	}
	
	/**
     * 修改title时的cancel
     */
    handleCancel() {
        this.editVisible = false;
    }

    /**
     * 修改title的ok
     */
    handleOk() {
        const that = this;
        if (that.editForm.value) {
            const params = {
                id:that.versionId?that.versionId:''
            }
            params['versionName'] = that.editForm.value['editName'].trim();
            if(that.editRemark){    
                params['note'] = that.editForm.value['editRemark'].trim();
            }
            if(that.editNote){
                params['remark'] = that.editForm.value['editNote'].trim();
            }
            that.request.doPost({
                url: 'addVersion',
                data: params,
                success: function (res) {
                    that.handleCancel();
                   if (res && res.code == 200) {
                       that.versionName = params['versionName'];   
                       that.remark = params['note'];
                       that.note = params['remark'];
                       if(!that.versionId){
                            that.versionId = res.data;
                        }
                       that.warn.onMsgSuccess(res.msg || Messages.SUCCESS.DATA);
                   } else {
                       that.warn.onMsgError(res.msg || Messages.FAIL.DATA);
                   }
                }
            });
        }
    }

    //获取分类
    getCategory() {
        const that = this;
        that.request.doPost({
            url: 'versionSuiteCategory',
            success: function (res) {
                if (res && res.code === 200) {
                    that.categoryList = res.data;
                } else {
                    that.warn.onMsgError(res.msg || Messages.FAIL.DATA);
                }
            }
        });

    }

    /* 已上架-未上架
     * @param 1已添加 2未添加
     */
	handleSwitch(e) {
        this.state = e;
        this.resetData();
    }
    
    //数据置为原始值域
    resetData(){
        this.pageNo = Default.PAGE.PAGE_NO;
        this.total = Default.PAGE.PAGE_TOTAL;
        this.indeterminate = false;
        this.isAllDisplayDataChecked = false;
        this.category = undefined;
        this.projectName = '';
        this.changeData();
    }

   
    // 表格数据
    changeData(...args) {
        const that = this;
        if (args && args.length > 0) {
            this.pageNo = Default.PAGE.PAGE_NO;
        }
        const params = {
            id:this.versionId,
            pageNo: this.pageNo,
            type:this.state
        };
        if(this.category){
            params['category'] = this.category;
        }
        if(this.projectName){
            params['projectName'] = this.projectName;
        }
        that.request.doPost({
            url: 'versionMouldInfoList',
            data: params,
            success: (res => {
                if (res && res.code == 200) {
                    that.materialList = res.data.infoList.list;
                    that.total = res.data.infoList.total;
                    if(res.data.versipn){
                        that.versionName = res.data.versipn.versionName
                        that.remark = res.data.versipn.note
                        that.note = res.data.versipn.remark
                    }
                    if(that.materialList){
                        if(that.state == 1){
                            that.addNum = that.total;
                            if(that.addNum == 0){    
                                that.radioSwitch[0].text = '已添加'
                            }else{
                                that.radioSwitch[0].text = `已添加（${that.addNum}）`
                            }
                        }
                        that.materialList.filter(v => {
                            v['checked'] = false;
                        });
                    }
                    that.isAllDisplayDataChecked = false;
                    that.indeterminate = false;
                } else {
                    that.warn.onError(res.msg || Messages.FAIL.DATA);
                }
            })
        });
    }

    // 翻页
    changePage(){
        this.checkedNumber = [];
        this.changeData();
    }

	//全选
	checkAll(e) {
        this.isAllDisplayDataChecked = e;
        this.materialList.forEach(item =>{
            item.checked = this.isAllDisplayDataChecked;
        })
        this.refreshStatus();
	}
	
	//单个选择
    refreshStatus() {
        const allChecked = this.materialList.every(value => value.checked === true);
        const allUnChecked = this.materialList.every(value => !value.checked);
        this.isAllDisplayDataChecked = allChecked;
        this.indeterminate = (!allChecked) && (!allUnChecked);
        this.checkedNumber = this.materialList.filter(value => value.checked);
    }

    //批量添加 删除
    opreateMaterial(str){
        const that = this;
        const param = {};
        let url = '';
        let detailIds = [];
        this.checkedNumber.forEach(item=>{
            detailIds.push(item.id)
        })
        if(str == 'add'){
            url = 'versionAddInfo';
            param['id'] = this.versionId;
        }else{
            url = 'versionDeleteInfo';
        }
        param['ids'] = detailIds
        if(this.versionId){    
            that.request.doPost({
                url: url,
                data: param,
                success: function (res) {
                    if (res && res.code === 200) {
                        if(str == 'add'){
                            that.warn.onSuccess('添加成功');
                            that.addNum += Number(that.checkedNumber.length)
                            that.radioSwitch[0].text = `已添加（${that.addNum}）`
                        }else{
                            that.warn.onMsgSuccess(res.msg || Messages.SUCCESS.DATA);
                        }
                        that.checkedNumber = [];
                        that.changeData(true);
                    } else {
                        that.warn.onMsgError(res.msg || Messages.FAIL.DATA);
                    }
                }
            });
        }else{
            that.warn.onWarn('请先填写版本名称');
        }
        
    }

    // 表格添加 删除
    handleOperate(str,item){
        const that = this;
        const param = {};
        let url = '';
        if(str == 'add'){
            url = 'versionAddInfo';
            param['id'] = this.versionId;
        }else{
            url = 'versionDeleteInfo';
        }
        param['ids'] = [item.id];
        if(this.versionId){
            that.request.doPost({
                url: url,
                data: param,
                success: function (res) {
                    if (res && res.code === 200) {
                        if(str == 'add'){
                            that.warn.onSuccess('添加成功');
                            that.addNum += 1
                            that.radioSwitch[0].text = `已添加（${that.addNum}）`
                        }else{
                            that.warn.onMsgSuccess(res.msg || Messages.SUCCESS.DATA);
                        }
                        that.changeData();
                        that.checkedNumber = [];
                    }else {
                        that.warn.onMsgError(res.msg || Messages.FAIL.DATA);
                    }
                }
            });
        }else{
            that.warn.onWarn('请先填写版本名称');
        }
    }
}
